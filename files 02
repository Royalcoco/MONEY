pip install web3
import json
import hashlib
from web3 import Web3

# Connect to Ethereum
w3 = Web3(Web3.HTTPProvider('https://mainnet.infura.io/v3/YOUR_INFURA_PROJECT_ID'))

# Adresse du contrat et ABI (interface binaire d'application)
contract_address = 'YOUR_CONTRACT_ADDRESS'
contract_abi = '''
[
    {
        "inputs": [
            {
                "internalType": "bytes32",
                "name": "_fileHash",
                "type": "bytes32"
            }
        ],
        "name": "setFileHash",
        "outputs": [],
        "stateMutability": "nonpayable",
        "type": "function"
    },
    {
        "inputs": [
            {
                "internalType": "bytes32",
                "name": "_fileHash",
                "type": "bytes32"
            }
        ],
        "name": "verifyFileHash",
        "outputs": [
            {
                "internalType": "bool",
                "name": "",
                "type": "bool"
            }
        ],
        "stateMutability": "view",
        "type": "function"
    },
    {
        "inputs": [],
        "name": "depositFunds",
        "outputs": [],
        "stateMutability": "payable",
        "type": "function"
    },
    {
        "inputs": [
            {
                "internalType": "uint256",
                "name": "amount",
                "type": "uint256"
            }
        ],
        "name": "withdrawFunds",
        "outputs": [],
        "stateMutability": "nonpayable",
        "type": "function"
    },
    {
        "inputs": [],
        "name": "getBalance",
        "outputs": [
            {
                "internalType": "uint256",
                "name": "",
                "type": "uint256"
            }
        ],
        "stateMutability": "view",
        "type": "function"
    },
    {
        "inputs": [],
        "name": "getTotalFunds",
        "outputs": [
            {
                "internalType": "uint256",
                "name": "",
                "type": "uint256"
            }
        ],
        "stateMutability": "view",
        "type": "function"
    }
]
'''

contract = w3.eth.contract(address=contract_address, abi=contract_abi)

# Calculer le hash du fichier
with open('points.json', 'rb') as f:
    file_data = f.read()
    file_hash = hashlib.sha256(file_data).hexdigest()

# Convertir le hash en bytes32
file_hash_bytes32 = w3.toBytes(hexstr=file_hash)

# Fonction pour définir le hash dans le smart contract
def set_file_hash():
    nonce = w3.eth.getTransactionCount('YOUR_WALLET_ADDRESS')
    tx = contract.functions.setFileHash(file_hash_bytes32).buildTransaction({
        'chainId': 1,
        'gas': 2000000,
        'gasPrice': w3.toWei('50', 'gwei'),
        'nonce': nonce,
    })
    
    private_key = 'YOUR_PRIVATE_KEY'
    signed_tx = w3.eth.account.signTransaction(tx, private_key)
    tx_hash = w3.eth.sendRawTransaction(signed_tx.rawTransaction)
    print(f"Transaction hash: {tx_hash.hex()}")

# Fonction pour vérifier le hash
def verify_hash():
    return contract.functions.verifyFileHash(file_hash_bytes32).call()

# Fonction pour déposer des fonds
def deposit_funds(amount_eth):
    nonce = w3.eth.getTransactionCount('YOUR_WALLET_ADDRESS')
    tx = contract.functions.depositFunds().buildTransaction({
        'chainId': 1,
        'gas': 2000000,
        'gasPrice': w3.toWei('50', 'gwei'),
        'nonce': nonce,
        'value': w3.toWei(amount_eth, 'ether')
    })

    private_key = 'YOUR_PRIVATE_KEY'
    signed_tx = w3.eth.account.signTransaction(tx, private_key)
    tx_hash = w3.eth.sendRawTransaction(signed_tx.rawTransaction)
    print(f"Deposit transaction hash: {tx_hash.hex()}")

# Fonction pour retirer des fonds
def withdraw_funds(amount_eth):
    nonce = w3.eth.getTransactionCount('YOUR_WALLET_ADDRESS')
    tx = contract.functions.withdrawFunds(w3.toWei(amount_eth, 'ether')).buildTransaction({
        'chainId': 1,
        'gas': 2000000,
        'gasPrice': w3.toWei('50', 'gwei'),
        'nonce': nonce,
    })

    private_key = 'YOUR_PRIVATE_KEY'
    signed_tx = w3.eth.account.signTransaction(tx, private_key)
    tx_hash = w3.eth.sendRawTransaction(signed_tx.rawTransaction)
    print(f"Withdraw transaction hash: {tx_hash.hex()}")

# Définir le hash dans le smart contract
set_file_hash()

# Vérifier le hash sur Ethereum
print("Hash verification result:", verify_hash())

# Déposer des fonds (par exemple, 0.1 ETH)
deposit_funds(0.1)

# Retirer des fonds (par exemple, 0.05 ETH)
withdraw_funds(0.05)
