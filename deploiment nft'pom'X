from web3 import Web3
import json

# Connexion à un nœud Ethereum (utilisez votre propre fournisseur ou un fournisseur comme Infura)
w3 = Web3(Web3.HTTPProvider('https://mainnet.infura.io/v3/YOUR_INFURA_PROJECT_ID'))

# Adresse du contrat déployé et ABI
contract_address = '0xYourContractAddress'
contract_abi = json.loads('''
[
    {
        "inputs": [
            {
                "internalType": "string",
                "name": "tokenURI",
                "type": "string"
            },
            {
                "internalType": "uint256",
                "name": "points",
                "type": "uint256"
            }
        ],
        "name": "createNFT",
        "outputs": [
            {
                "internalType": "uint256",
                "name": "",
                "type": "uint256"
            }
        ],
        "stateMutability": "nonpayable",
        "type": "function"
    },
    {
        "inputs": [
            {
                "internalType": "uint256",
                "name": "tokenId",
                "type": "uint256"
            },
            {
                "internalType": "uint256",
                "name": "points",
                "type": "uint256"
            }
        ],
        "name": "storePoints",
        "outputs": [],
        "stateMutability": "nonpayable",
        "type": "function"
    },
    {
        "inputs": [
            {
                "internalType": "uint256",
                "name": "",
                "type": "uint256"
            }
        ],
        "name": "nftPoints",
        "outputs": [
            {
                "internalType": "uint256",
                "name": "",
                "type": "uint256"
            }
        ],
        "stateMutability": "view",
        "type": "function"
    }
]
''')

contract = w3.eth.contract(address=contract_address, abi=contract_abi)

# Fonction pour créer un nouveau NFT
def create_nft(token_uri, points, private_key):
    account = w3.eth.account.privateKeyToAccount(private_key)
    nonce = w3.eth.getTransactionCount(account.address)
    tx = contract.functions.createNFT(token_uri, points).buildTransaction({
        'chainId': 1,
        'gas': 2000000,
        'gasPrice': w3.toWei('50', 'gwei'),
        'nonce': nonce,
    })
    signed_tx = w3.eth.account.signTransaction(tx, private_key)
    tx_hash = w3.eth.sendRawTransaction(signed_tx.rawTransaction)
    return tx_hash.hex()

# Fonction pour stocker des points dans un NFT
def store_points(token_id, points, private_key):
    account = w3.eth.account.privateKeyToAccount(private_key)
    nonce = w3.eth.getTransactionCount(account.address)
    tx = contract.functions.storePoints(token_id, points).buildTransaction({
        'chainId': 1,
        'gas': 2000000,
        'gasPrice': w3.toWei('50', 'gwei'),
        'nonce': nonce,
    })
    signed_tx = w3.eth.account.signTransaction(tx, private_key)
    tx_hash = w3.eth.sendRawTransaction(signed_tx.rawTransaction)
    return tx_hash.hex()

# Fonction pour consulter les points d'un NFT
def get_nft_points(token_id):
    points = contract.functions.nftPoints(token_id).call()
    return points

# Exemple d'utilisation
if __name__ == "__main__":
    private_key = "your_private_key"
    token_uri = "https://example.com/nft/metadata/1"
    points = 1000
    
    tx_hash = create_nft(token_uri, points, private_key)
    print("Transaction hash de création de NFT:", tx_hash)
    
    token_id = 0  # Exemple d'ID de token
    additional_points = 500
    tx_hash = store_points(token_id, additional_points, private_key)
    print("Transaction hash de stockage de points:", tx_hash)
    
    points = get_nft_points(token_id)
    print("Points du NFT:", points)
